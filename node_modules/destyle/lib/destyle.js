(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = global || self, factory(global.destyle = {}, global.React));
}(this, function (exports, React) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  const StyleContext = React.createContext();

  const defaultConcatenator = (a, b) => `${a} ${b}`;

  const StyleProvider = (_ref) => {
    let {
      children,
      theme,
      reducer,
      concatenatorProp = 'className',
      concatenator = defaultConcatenator
    } = _ref;
    const value = reducer ? React.useReducer(reducer, theme) : React.useState(theme);
    return React__default.createElement(StyleContext.Provider, {
      value: [...value, concatenatorProp, concatenator]
    }, children);
  };

  const useStyles = function (key, props) {
    const [theme, updater, concatenatorProp, concatenator] = React.useContext(StyleContext);
    const namespace = theme[key];

    if (!namespace) {
      console.warn(`Destyle: Attempting to use namespace (${key}) which does not exist on theme.`);
      return [{}, updater];
    }

    if (!props) {
      console.warn(`Destyle: No props were not passed to namespace (${key}). Try useStyles(${key}, props).`);
    }

    for (var _len = arguments.length, extra = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      extra[_key - 2] = arguments[_key];
    }

    const styles = typeof namespace === 'function' ? namespace(props, ...extra) : namespace;

    if (props[concatenatorProp]) {
      const overrides = props[concatenatorProp];
      const res = Object.keys(overrides).reduce((r, k) => {
        r[k] = concatenator(styles[k], overrides[k]);
        return r;
      }, {});
      return [_objectSpread({}, styles, res), updater];
    }

    return [styles, updater];
  };

  const useClasses = useStyles;

  exports.StyleProvider = StyleProvider;
  exports.useClasses = useClasses;
  exports.useStyles = useStyles;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
